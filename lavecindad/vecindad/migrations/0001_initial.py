# Generated by Django 4.1.4 on 2023-11-11 18:56

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import vecindad.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UsuarioPersonalizado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('rut', models.CharField(max_length=20, null=True, unique=True, validators=[vecindad.validators.validate_rut])),
                ('fecha_nacimiento', models.DateField(blank=True, null=True)),
                ('direccion', models.CharField(blank=True, max_length=255)),
                ('telefono', models.CharField(blank=True, max_length=15, null=True)),
                ('sexo', models.CharField(blank=True, choices=[('M', 'Masculino'), ('F', 'Femenino')], max_length=10, null=True)),
                ('nombre_junta', models.CharField(blank=True, max_length=255, null=True)),
                ('id_sede', models.CharField(blank=True, max_length=20, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='JuntaDeVecinos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_sede', models.CharField(max_length=20, unique=True)),
                ('comuna', models.CharField(blank=True, max_length=100, null=True)),
                ('sector_cerro', models.CharField(blank=True, max_length=100, null=True)),
                ('nombre', models.CharField(max_length=255)),
                ('direccion', models.TextField(blank=True, max_length=255, null=True)),
                ('telefono', models.CharField(max_length=20)),
                ('unidad_vecinal', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Proyecto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=200)),
                ('descripcion', models.TextField()),
                ('estado', models.CharField(choices=[('A', 'Aprobado'), ('R', 'Rechazado'), ('P', 'Pendiente')], default='P', max_length=1)),
                ('fecha_postulacion', models.DateTimeField(auto_now_add=True, null=True)),
                ('categoria', models.CharField(blank=True, choices=[('Mantenimiento y Reparaciones', 'Mantenimiento y Reparaciones'), ('Eventos Sociales', 'Eventos Sociales'), ('Medio Ambiente', 'Medio Ambiente'), ('Seguridad', 'Seguridad'), ('Servicios Comunitarios', 'Servicios Comunitarios'), ('Infraestructura', 'Infraestructura'), ('Educaci贸n', 'Educaci贸n'), ('Deportes y Recreaci贸n', 'Deportes y Recreaci贸n'), ('Salud y Bienestar', 'Salud y Bienestar'), ('Cultura y Arte', 'Cultura y Arte')], max_length=100, null=True)),
                ('presidente', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='presidente', to=settings.AUTH_USER_MODEL)),
                ('residente', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='residente', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='NoticiaJuntaVecinos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('imagen', models.ImageField(blank=True, null=True, upload_to='noticias/')),
                ('titulo', models.CharField(max_length=255)),
                ('contenido', models.TextField()),
                ('fecha_publicacion', models.DateTimeField(auto_now_add=True)),
                ('junta_de_vecinos', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vecindad.juntadevecinos')),
            ],
        ),
        migrations.CreateModel(
            name='Mensaje',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asunto', models.TextField(blank=True, null=True)),
                ('contenido_presidente', models.TextField(blank=True, null=True)),
                ('contenido', models.TextField()),
                ('fecha_envio', models.DateTimeField(default=django.utils.timezone.now)),
                ('solicitud_espacios', models.CharField(blank=True, choices=[('cancha', 'Cancha'), ('sala', 'Sala'), ('plaza', 'Plaza'), ('otro', 'Otro')], max_length=10, verbose_name='Tipo de Espacio Solicitado')),
                ('solicitud_fecha_hora', models.DateTimeField(blank=True, null=True)),
                ('emisor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mensajes_enviados', to=settings.AUTH_USER_MODEL)),
                ('receptor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mensajes_recibidos', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AlgunaClase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='usuariopersonalizado',
            name='junta_de_vecinos',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='vecindad.juntadevecinos'),
        ),
        migrations.AddField(
            model_name='usuariopersonalizado',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
